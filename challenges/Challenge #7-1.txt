//Challenge #6: Demonstrate the pillars of OOP
//Create a Vehicle superclass, and an interface that represents a type of vehicle (like a bus or boat or w/e)
//The vehicle should contain states that track 1) the number of vehicles, 2) speed, and 3) an enum declaring the mode of transport (air, water, land).
//It should also have movement and stopping methods!
//The interface should have ABSTRACT methods pertaining to that specific vehicle class.
//Also! Make a class that extends Vehicle, and implements the interface, and provides its own implementations
//This new class should demonstrate 1) overriding, 2) overloading, 3) constructor chaining, and 4) the this. and super. keywords.
//Prevent redundant code! Use constructor chaining!

public class Cessna extends Vehicle implements Airplane {
    integer altitude;
    string landingGear;
    
    //this. keywords!
    public Cessna() {
        this.numOfVehicles = 1;
        this.speed = 30;
        medium traveltype = medium.land;
        this.position = 0;
        this.gear = 1;
        altitude = 0;
        landingGear = 'Deployed';
    }
    
    public void takeOff() {
        if (altitude == 0 && speed >= 15 && landingGear == 'Deployed') {
            altitude += 300;
            system.debug('Takeoff! Our altitude is now ' +altitude+ '.');
                } else if (altitude > 0) {
                    system.debug('You are already in the air. See the clouds?');
                } else if(altitude == 0 && landingGear == 'Retracted') {
                    system.debug('You have to take out your landing gear...');
                } else if (altitude == 0 && speed < 15 && landingGear == 'Deployed') {
                    system.debug('You are still going too slow! Speed must at least be 15 before takeoff.');
                }
    }
    
    public void changeAltitude(integer change) {
        if (altitude > 0 && altitude + change > 0) {
            altitude += change;
            system.debug('Your altitude is now ' +altitude+ '.');
        } else if(altitude > 0 && altitude + change <= 0) {
            system.debug('Uh, no way Jose. You would crash this thing if you did that.');
        } else if (altitude == 0) {
            system.debug('You still have to take off, idiot...');
        }
    }
    
    //An overridden method!
    public override void stop() {
        if (altitude > 0) {
            system.debug('Stopping is impossible! You are in the air!');
        } else if (altitude < 0) {
            //Use of the super. keyword!
            super.stop();
        }
    }
    
    public void landingGear() {
        if (landingGear == 'Deployed') {
            landingGear = 'Retracted';
            system.debug('Retracting landing gear.');
         } else if (landingGear == 'Retracted') {
            landingGear = 'Deployed';
            system.debug('Deploying landing gear.');
         }
    }
    
    public void landing() {
        if (landingGear == 'Deployed' && altitude <= 50) {
            speed = 0;
            altitude = 0;
            system.debug('Safely landed!');
        } else if (landingGear == 'Deployed' && altitude > 50) {
            system.debug('You are still too high. Altitude should be at 50 or lower!');
        } else if (landingGear == 'Retracted') {
            system.debug('Dude...take out your landing gear...');
        }
    }
}